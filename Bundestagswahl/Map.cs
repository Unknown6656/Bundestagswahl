using System.Collections.Generic;
using System.Linq;
using System;

using Unknown6656.Generics;

namespace Bundestagswahl;


public enum State
    : byte
{
    BW = (byte)'0',
    BY = (byte)'1',
    BE = (byte)'2',
    BB = (byte)'3',
    HB = (byte)'4',
    HH = (byte)'5',
    HE = (byte)'6',
    MV = (byte)'7',
    NI = (byte)'8',
    NW = (byte)'9',
    RP = (byte)'A',
    SL = (byte)'B',
    SN = (byte)'C',
    ST = (byte)'D',
    SH = (byte)'E',
    TH = (byte)'F',

    // west/east subdivisions of berlin
    BE_W = (byte)'w',
    BE_O = (byte)'o',
}

public class Map
{
    public static Map SmallMap { get; } = new([
        "--------------E----------------------------------",
        "--------------EEEEEEEEE--------------------------",
        "---------------E-EEEEEE----EE--------7777--------",
        "---------------EEEEEEEEEEEEE------7777777--------",
        "--------------E-EEEEEEEEEEEE--777777777777-------",
        "------888888---8888EEEEEEEE77777777777777777-----",
        "--------88888-8488888555EEE77777777777777777-----",
        "-------8-888888888888855EE7777773777777733337----",
        "--------8888888448888888888873333333333333333----",
        "-------88888888888888888888DDDDDD3333333333------",
        "-----8888888888888888888888DDDDDD3333wwo33333----",
        "-------88899899989888888888DDDDDDD333333333333---",
        "-----9999999889998888888888DDDDDD3333333333333---",
        "-999999999999999998888888DDDDDDDDDDD33333333333—-",
        "--99999999999999999888888DDDDDDDDDDDDD333333333--",
        "--999999999999996966888FFFFDDDDDDCCCCC3333CCCCC--",
        "-999999999999996666666FFFFFFFDDDDCCCCCCCCCCCCCCCC",
        "9999999999999966666666FFFFFFFFFFDFFCCCCCCCCC-CCCC",
        "-9999999AAA96666666666FFFFFFFFFFFFCCCCCCCC----C--",
        "--99AAAAAAA66666666666FFFFFFFFFCCCCCCCC----------",
        "AAAAAAAAAAA6666666661111FF1F1111CC---------------",
        "-AAAAAAAAA66666611111111111111111----------------",
        "--AAAAAAAAAAA6661111111111111111111--------------",
        "-BBBBBBAAAAAA0661100111111111111111--------------",
        "---BBBBAAAAAA00000000011111111111111-------------",
        "------BAAAAA000000000011111111111111111----------",
        "-----------000000000000111111111111111111--------",
        "---------000000000000000111111111111111111-------",
        "--------00000000000001111111111111111111-1-------",
        "-------0000000000000011111111111111111-----------",
        "-------000000000000000111111111111111------------",
        "-------00000--000000011111111111111111-----------",
        "-----------------01-111-111111-------1-----------",
        "---------------------11--------------------------",
    ]);

    public static Map MediumMap { get; } = new([
        "--------------------E------------------------------------------------",
        "-------------------EE-EEEE-------------------------------------------",
        "-------------------EEE-EEEEEEEE--------------------------------------",
        "---------------------E-EEEEEEEEE------EE-------------777-------------",
        "---------------------EEEEEEEEEEEEEEE--EEE--------77777777------------",
        "----------------E------EEEEEEEEEEEEEEEE--------777777777-7-----------",
        "---------------------E-EEEEEEEEEEEEEE-----77777777777777777----------",
        "-------------------8-88—EEEEEEEEEEEE7777-777777777777777777777-------",
        "--------888888888---8888888EEEE55EEEE77777777777777777777777---------",
        "----------88888888-8-488888885555EEEEE777777777777777777777777-------",
        "---------8-88888888888888888885558EE777777777777777777777337737------",
        "-----------8888888844488888888888888888777333333777777773333373------",
        "-----------888888888844488888888888888888DD33333333333333333333------",
        "----------888888888888888888888888888DD88DDDD3333333333333333--------",
        "---------8888888888888888888888888888DDDDDDDDD333333wwoo333333-------",
        "------88888888888888888888888888888888DDDDDDDD333333wwwoo3333333-----",
        "---------88889998899999988888888888888DDDDDDDDD333333333333333333----",
        "--------999999998889999988888888888888DDDDDDDDD333333333333333333----",
        "-------9999999999999999998888888888DDDDDDDDDDDDD333333333333333333---",
        "99999999999999999999999999888888888DDDDDDDDDDDDDDDDDD3333333333333---",
        "--999999999999999999999999888888888DDDDDDDDDDDDDDDDDDD333333333333---",
        "--9999999999999999999999996688888F8FFDDDDDDDDDDDCCCCC3333333C3CCCC---",
        "-999999999999999999999669666888FFFFFFFDDDDDDDDCCCCCCCC3C333CCCCCCCCC-",
        "-999999999999999999996666666666FFFFFFFFFDDDDDDCCCCCCCCCCCCCCCCCCCCCCC",
        "9999999999999999999666666666666FFFFFFFFFFFDDDDFFCCCCCCCCCCCCCCCCCCCCC",
        "999999999999AA9999666666666666FFFFFFFFFFFFFFFFFFFCCCCCCCCCCCCCC--CCC-",
        "-9999999999AAAA966666666666666FFFFFFFFFFFFFFFFFCCCCCCCCCCCC----------",
        "--99999AAAAAAAAA666666666666666FFFFFFFFFFFFFCFCCCCCCCCC-C------------",
        "-999AAAAAAAAAAA66666666666666611FFFFFFF11FFFCCCCCCCCC----------------",
        "AAAAAAAAAAAAAAA6666666666666111111FF11F111111-CC---------------------",
        "AAAAAAAAAAAAA6666666666666111111111111111111111----------------------",
        "-AAAAAAAAAAAAAAAA6666611111111111111111111111111---------------------",
        "--AAAAAAAAAAAAAAAA6666111111111111111111111111111--------------------",
        "-BBBBBBBBAAAAAAAA66666111000111111111111111111111--------------------",
        "--BBBBBBBAAAAAAAAA006000000010111111111111111111111------------------",
        "---BBBBBBAAAAAAAA0000000000000111111111111111111111-1----------------",
        "----------AAAAAAA0000000000000111111111111111111111111---------------",
        "---------------A0000000000000000111111111111111111111111-1-----------",
        "--------------000000000000000000111111111111111111111111111----------",
        "------------000000000000000000000111111111111111111111111111---------",
        "-----------0000000000000000000011111111111111111111111111-1----------",
        "----------0000000000000000000111111111111111111111111111-------------",
        "---------00000000000000000000011111111111111111111111----------------",
        "---------000000000000000000000111111111111111111111------------------",
        "---------00000000000000000000011111111111111111111111----------------",
        "---------0000000-----0000001101111111111111111-11111-----------------",
        "------------------------001-1111-11111111----------111---------------",
        "-----------------------------111----1111-----------------------------",
    ]);

    public static Map LargeMap { get; } = new([
        "-----------------------------E-------------------------------------------------------------------",
        "----------------------------EE--EEEEE------------------------------------------------------------",
        "----------------------------E-E-EEEEEEEEEEE------------------------------------------------------",
        "----------------------------EE-E-EEEEEEEEEEEE--------------------------------7-------------------",
        "-------------------------------E---EEEEEEEEEEE----------------------------7-77-------------------",
        "--------------------------------EEEEEEEEEEEEEEE--------EEE----------------7777777----------------",
        "-------------------------------EEEEEEEEEEEEEEEEEEEEE-EEE------------77777777777777---------------",
        "-----------------------E---------EEEEEEEEEEEEEEEEEEEEEEE----------777777777777--77---------------",
        "------------------------------E----EEEEEEEEEEEEEEEEEEEE----777777777777777777777777--------------",
        "----------------------------E----EEEEEEEEEEEEEEEEEEEE-77—7777777777777777777777777—-7------------",
        "---------------------8-8-------888888-EEEEEEEEEEEEEEE7777777777777777777777777777777777----------",
        "-------------88-888888888----8888888888EEEEEE5EEEEEE77777777777777777777777777777777-------------",
        "-----------------888888888-88-4488888888EE55555EEEEEEE777777777777777777777777777777777----------",
        "---------------88888888888--88-8888888888855555EEEEEE77777777777777777777777777777777777---------",
        "------------------8888888888888888888888888555588EE7887777777773777777777777777733333377---------",
        "-----------------888888888884448888888888888888888888887777777333337777777777773333337733--------",
        "----------------888888888888884444888888888888888888888883333333333333337773333333333333---------",
        "----------------888888888888888844888888888888888888888888DDDD3333333333333333333333333----------",
        "---------------8888888888888888888888888888888888888DD8888DDDDDDDD33333333333333333333-----------",
        "---------------8888888888888888888888888888888888888DDDDDDDDDDDDDD33333333wwoo33333333-----------",
        "-----------888888888888888888888888888888888888888888DDDDDDDDDDDD33333333wwwooo3333333333--------",
        "--------------888888888888889998889888888888888888888DDDDDDDDDDDDDD333333wwwwooo33333333333------",
        "--------------8888899999888999998999888888888888888888DDDDDDDDDDDDD333333333333333333333333------",
        "-------------88899999988888899999988888888888888888888DDDDDDDDDDDD333333333333333333333333-------",
        "-----------9999999999998888889999988888888888888888888DDDDDDDDDDDD33333333333333333333333333-----",
        "-----------9999999999988899999999998888888888888888DDDDDDDDDDDDDDDDD333333333333333333333333-----",
        "--999999999999999999999999999999999998888888888888DDDDDDDDDDDDDDDDDDDDDDD33333333333333333333----",
        "---9999999999999999999999999999999999988888888888DDDDDDDDDDDDDDDDDDDDDDDDDDD33333333333333333----",
        "----9999999999999999999999999999999999888888888888DDDDDDDDDDDDDDDDDDDDDDDDDD333333333333333C-----",
        "-----999999999999999999999999999999996668888888888FFDDDDDDDDDDDDDDDCCCCCCCC333333333CCCCCCCCC----",
        "----99999999999999999999999999996699666688888FFFFFFFFDDDDDDDDDDDDCCCCCCCCCCC3CC3333CCCCCCCCCCC---",
        "---9999999999999999999999999996666666668866FFFFFFFFFFFFFFFDDDDDDDCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC-",
        "-99999999999999999999999999999666666666686666FFFFFFFFFFFFDDDDDDDDCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC-",
        "999999999999999999999999999996666666666666666FFFFFFFFFFFFFFDDDDDDCFFCCCCCCCCCCCCCCCCCCCCCCCCCCCC-",
        "--999999999999999999999999996666666666666666FFFFFFFFFFFFFFFFFFFDDDFFFFCCCCCCCCCCCCCCCCCC---CCCCC-",
        "-99999999999999999AAA99996666666666666666666FFFFFFFFFFFFFFFFFFFFFFFFCCCCCCCCCCCCCCCCCCC-----CCC--",
        "---999999999999AAAAAAA996666666666666666666FFFFFFFFFFFFFFFFFFFFFFFCCCCCCCCCCCCCCCCC--------------",
        "----9999999AAAAAAAAAAAA666666666666666666666FFFFFFFFFFFFFFFFFFFFFFCCCCCCCCCCCC-C-----------------",
        "-----999AAAAAAAAAAAAAA666666666666666666666611FFFFFFFFFFFFFFFFFCCCCCCCCCCCCC---------------------",
        "-AAA99AAAAAAAAAAAAAAAA6666666666666666666661111FFFFFFFFF11FFFFFCCCCCCCCC-C-----------------------",
        "-AAAAAAAAAAAAAAAAAAAAAA66666666666666666111111111FF111FF111111111-CC-----------------------------",
        "-AAAAAAAAAAAAAAAAAAA66666666666666666661111111111F111111111111111-C------------------------------",
        "-AAAAAAAAAAAAAAAAAAAAAAA666666661111111111111111111111111111111111-------------------------------",
        "----AAAAAAAAAAAAAAAAAAAAA6666666111111111111111111111111111111111111-----------------------------",
        "----AAAAAAAAAAAAAAAAAAAAAA6666661111111111111111111111111111111111111----------------------------",
        "---AAAAABBBBAAAAAAAAAAAAA66666666111001011111111111111111111111111111----------------------------",
        "----BBBBBBBBBAAAAAAAAAAAAA60666661100000111111111111111111111111111111---------------------------",
        "-----BBBBBBBBBAAAAAAAAAAAA000660000000000101111111111111111111111111111--------------------------",
        "------BBBBBBBBAAAAAAAAAAAA0000000000000000011111111111111111111111111111-------------------------",
        "----------BBB-AAAAAAAAAAA00000000000000000011111111111111111111111111111111----------------------",
        "-----------------AAAAAAA00000000000000000000111111111111111111111111111111111--------------------",
        "----------------------A00000000000000000000001111111111111111111111111111111111------------------",
        "---------------------0000000000000000000000000111111111111111111111111111111111111---------------",
        "-------------------00000000000000000000000000011111111111111111111111111111111111111-------------",
        "------------------000000000000000000000000001001111111111111111111111111111111111111-------------",
        "-----------------000000000000000000000000000011111111111111111111111111111111111-11--------------",
        "----------------0000000000000000000000000111111111111111111111111111111111111111-----------------",
        "---------------0000000000000000000000000001111111111111111111111111111111111111------------------",
        "---------------000000000000000000000000000111111111111111111111111111111111----------------------",
        "---------------000000000000000000000000000011111111111111111111111111111-------------------------",
        "--------------000000000000000000000000000001111111111111111111111111111111-----------------------",
        "--------------0000000000—00000000000000001111111111111111111111111111111111----------------------",
        "--------------0000000000-----000000000000001111111111111111111111-11111111-----------------------",
        "----------------------------------00011111111-11111111111111111-1----1--1111---------------------",
        "-----------------------------------011---11111-----111111----------------111---------------------",
        "-------------------------------------------11----------------------------------------------------",
    ]);


    private readonly Dictionary<State, List<int>> _states = [];
    private readonly int _width, _height;


    public (int X, int Y)[] this[State state]
    {
        get
        {
            if (state is State.BE)
                return [.. this[State.BE_W], .. this[State.BE_O]];
            else if (_states.TryGetValue(state, out List<int>? positions))
            {
                (int X, int Y)[] result = new (int, int)[positions.Count];

                for (int i = 0; i < positions.Count; ++i)
                    result[i] = (positions[i] % _width, positions[i] / _width);

                return result;
            }
            else
                return [];
        }
    }

    public State? this[int x, int y]
    {
        get
        {
            int index = x + y * _width;

            return x < 0 || index >= _width * _height ? null : (from pair in _states
                                                                where pair.Value.Contains(index)
                                                                select pair.Key).FirstOrDefault();
        }
    }

    public int Width => _width;

    public int Height => _height;


    public Map(string[] map_rows)
    {
        _height = map_rows.Length;
        _width = map_rows.Max(row => row.Length);

        State[] known_values = Enum.GetValues<State>();

        for (int y = 0; y < _height; ++y)
        {
            string row = map_rows[y];

            for (int x = 0; x < _width && x < row.Length; ++x)
            {
                int index = x + y * _width;
                State s = (State)row[x];

                if (s is State.BE)
                {
                    add_index(State.BE_W);
                    add_index(State.BE_O);
                }
                else
                    add_index(s);


                void add_index(State s)
                {
                    if (known_values.Contains(s))
                        if (!_states.TryGetValue(s, out List<int>? positions))
                            _states[s] = [index];
                        else
                            positions.Add(index);
                }
            }
        }
    }

    public override string ToString() => $"{_width} x {_height}";


    // TODO : implement rendering using braille characters for outside borders

    public void RenderToConsole(MapColoring coloring, int left = 0, int top = 0)
    {
        Console.ResetColor();

        foreach ((State state, List<int> positions) in _states)
            if (coloring.States.TryGetValue(state, out (ConsoleColor Color, char Char) clr))
            {
                Console.ForegroundColor = clr.Color;

                foreach (int position in positions)
                {
                    Console.SetCursorPosition(position % _width + left, position / _width + top);
                    Console.Write(clr.Char);
                }
            }

        Console.ResetColor();
    }
}

public record MapColoring(Dictionary<State, (ConsoleColor Color, char Char)> States)
{
    public static MapColoring Default { get; } = new(new()
    {
        [State.BW] = new(239, 217, 115),
        [State.BY] = new(149, 159, 208),
        [State.BE] = new(235, 227,  66),
        [State.BB] = new(164, 210, 174),
        [State.HB] = new(222, 193,  13),
        [State.HH] = new(160, 124,   4),
        [State.HE] = new(173, 143, 193),
        [State.MV] = new(232, 166, 131),
        [State.NI] = new(129, 200, 194),
        [State.NW] = new(234, 106, 106),
        [State.RP] = new(122, 156,  70),
        [State.SL] = new(131, 123, 162),
        [State.SN] = new(233, 143, 179),
        [State.ST] = new(230, 162, 202),
        [State.SH] = new(182, 210, 125),
        [State.TH] = new(207, 218,  98),

        [State.BE_W] = new(235, 227,  66),
        [State.BE_O] = new(234, 156, 156),
    }, 'x');


    public MapColoring(Dictionary<State, ConsoleColor> Colors, char Char)
        : this(Colors.ToDictionary(pair => pair.Key, pair => (pair.Value, Char)))
    {
    }

    public MapColoring(IEnumerable<State> SelectedStates, ConsoleColor SelectedColor, char SelectedChar, ConsoleColor DeselectedColor, char DeselectedChar)
        : this(Enum.GetValues<State>().ToDictionary(LINQ.id, s => SelectedStates.Contains(s) ? (SelectedColor, SelectedChar) : (DeselectedColor, DeselectedChar)))
    {
    }
}
